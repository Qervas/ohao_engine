#pragma once
#include <type_traits>
#include <algorithm>

namespace ohao {

template<typename T, typename... Args>
std::shared_ptr<T> Actor::addComponent(Args&&... args) {
    static_assert(std::is_base_of<Component, T>::value, "Type must be a Component");
    
    // Create new component with provided arguments
    std::shared_ptr<T> component = std::make_shared<T>(std::forward<Args>(args)...);
    
    // Set this actor as the owner
    component->setOwner(this);
    
    // Add to component lists
    components.push_back(component);
    componentsByType[std::type_index(typeid(T))] = component;
    
    // Initialize the component if actor is already active
    if (isActive()) {
        component->initialize();
    }
    
    // Notify deriving classes
    onComponentAdded(component);
    
    return component;
}

template<typename T>
std::shared_ptr<T> Actor::getComponent() const {
    static_assert(std::is_base_of<Component, T>::value, "Type must be a Component");
    
    // Look for the component type in our map
    auto it = componentsByType.find(std::type_index(typeid(T)));
    if (it != componentsByType.end()) {
        // Cast the component to the requested type
        return std::static_pointer_cast<T>(it->second);
    }
    
    return nullptr;
}

template<typename T>
bool Actor::hasComponent() const {
    static_assert(std::is_base_of<Component, T>::value, "Type must be a Component");
    
    // Look for the component type in our map
    auto it = componentsByType.find(std::type_index(typeid(T)));
    return it != componentsByType.end();
}

template<typename T>
bool Actor::removeComponent() {
    static_assert(std::is_base_of<Component, T>::value, "Type must be a Component");
    
    // Look for the component type in our map
    auto it = componentsByType.find(std::type_index(typeid(T)));
    if (it != componentsByType.end()) {
        // Get the component
        std::shared_ptr<Component> component = it->second;
        
        // Remove from type map
        componentsByType.erase(it);
        
        // Remove from components vector
        auto compIt = std::find(components.begin(), components.end(), component);
        if (compIt != components.end()) {
            components.erase(compIt);
        }
        
        // Clean up component
        component->destroy();
        component->setOwner(nullptr);
        
        // Notify deriving classes
        onComponentRemoved(component);
        
        return true;
    }
    
    return false;
}

} // namespace ohao 